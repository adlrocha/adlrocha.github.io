<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on @adlrocha</title>
    <link>/tags/programming/</link>
    <description>Recent content in Programming on @adlrocha</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Remember `to(&#39;cpu&#39;)` in Pytorch to release GPU memory</title>
      <link>/til/2024-01-11-pytorch-collab-to-cpu/</link>
      <pubDate>Sat, 20 Jan 2024 00:00:00 +0000</pubDate>
      <guid>/til/2024-01-11-pytorch-collab-to-cpu/</guid>
      <description>&lt;h1 id=&#34;remember-tocpu-in-pytorch-to-release-gpu-memory&#34;&gt;Remember &lt;code&gt;to(&#39;cpu&#39;)&lt;/code&gt; in Pytorch to release GPU memory&lt;/h1&gt;&#xA;&lt;p&gt;When I saw that Microsoft had released &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/phi-2-the-surprising-power-of-small-language-models/&#34;&gt;phi-2&lt;/a&gt;, a 2.7B parameters LLM, I thought: &lt;em&gt;&amp;ldquo;this is the perfect excuse to get my hands dirty with LLMs&amp;rdquo;&lt;/em&gt;. The model was small enough to test it directly inside Google Colab, as it would fit the 15GiB memory GPUs provided in the free plan.&lt;/p&gt;&#xA;&lt;p&gt;So without further ado, I opened Google Colab, &lt;code&gt;pip install&lt;/code&gt;ed HF&amp;rsquo;s &lt;code&gt;transformers&lt;/code&gt; library, and wrote the following code snippet to test the model:&lt;/p&gt;</description>
    </item>
    <item>
      <title>When should one use Rust&#39;s `Pin&lt;&gt;`?</title>
      <link>/til/2023-08-29-rust-pin/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      <guid>/til/2023-08-29-rust-pin/</guid>
      <description>&lt;h1 id=&#34;when-should-one-use-rusts-pin&#34;&gt;When should one use Rust&amp;rsquo;s &lt;code&gt;Pin&amp;lt;&amp;gt;&lt;/code&gt;?&lt;/h1&gt;&#xA;&lt;p&gt;The other day I was reviewing some code from the &lt;a href=&#34;https://github.com/consensus-shipyard/fendermint&#34;&gt;Fendermint&lt;/a&gt; project that I am currently contributing to, and I had to ask the author of the PR directly, &lt;em&gt;&amp;ldquo;man! you have to teach me when I am supposed to use &lt;code&gt;Pin&amp;lt;&amp;gt;&lt;/code&gt;. I see you are using it all over the place in this API, but I don&amp;rsquo;t know why&amp;rdquo;&lt;/em&gt;. His immediate answer was a bit surprising although kind of expected. He answered, &lt;em&gt;&amp;ldquo;I do compiler-driven development, so I don&amp;rsquo;t have a good answer for you&amp;rdquo;&lt;/em&gt;. It was kind of an expected answer because after some time writing code in Rust you get used to relying on the compiler for a lot of the heavy-lifting when writing more complex code in order to minimize your cognitive load.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
